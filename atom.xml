<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>非常大人</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-12T10:01:46.975Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>VeryBigMan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不同WKWebView之间实现浏览状态隔离</title>
    <link href="http://yoursite.com/2019/01/12/Session-isolation/"/>
    <id>http://yoursite.com/2019/01/12/Session-isolation/</id>
    <published>2019-01-12T06:35:23.000Z</published>
    <updated>2019-01-12T10:01:46.975Z</updated>
    
    <content type="html"><![CDATA[<p>项目中用到了<code>WKWebView</code>来渲染网页，有一个需求是在不同的账号下希望实现浏览状态隔离，如何实现呢？</p><h2 id="Sample-app"><a href="#Sample-app" class="headerlink" title="Sample app"></a>Sample app</h2><p>下图是我们用来测试的sample app, 两个tab分别有两个不同的<code>WKWebView</code>实例，每次用户切换tab的时候，对应的tab会刷新对<code>https://login.live.com</code>这个地址的访问。</p><img src="/2019/01/12/Session-isolation/sample-app.png"><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>默认状态下，不同的<code>WKWebView</code>实例是不会共享浏览状态的，因此我们可以在两个tab登录不同的账号，切换tab的时候对应的登录状态不会乱掉</li><li>但是如果我们在其中一个tab网页登录的时候选择<code>Keep me signed in</code>，奇怪的事情发生了，当切换到另一个tab的时候，发现另一个tab竟然也处于登录的状态<img src="/2019/01/12/Session-isolation/keep-me-signed-in.png"></li></ol><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><ol><li>勾选<code>Keep me signed in</code>的时候发生了什么？<br>登录状态的保持需要客户端保存cookie，而我们知道cookie是分<a href="https://en.wikipedia.org/wiki/HTTP_cookie#Session_cookie" target="_blank" rel="noopener">session cookie</a>和<a href="https://en.wikipedia.org/wiki/HTTP_cookie#Persistent_cookie" target="_blank" rel="noopener">persistent cookie</a>的，两者的区别在<code>WKWebView</code>的体现就是，前者会在<code>WKWebView</code>实例消失的时候随之消失，而后者会保存在文件系统中。当用户勾选<code>Keep me signed in</code>的时候，网页会写入某些<code>persistent cookie</code>，这样当app下次启动初始化<code>WKWebView</code>的时候，网页就能读取到这些内容保持用户的登录状态。<br>下图是app的文件系统，我们发现当勾选了<code>Keep me signed in</code>，但是人为删除<code>Cookies</code>文件时，网页的登录状态会丢失，这样也进一步验证了我们的想法（也可以打开<code>Cookies</code>文件查看内容）</li></ol><img src="/2019/01/12/Session-isolation/cookies-in-file-system.png"><ol start="2"><li><p>为什么默认状态下，<code>WKWebView</code>不会共享浏览状态？<br>默认状态下，不同的<code>WKWebView</code>拥有不同的<a href="https://developer.apple.com/documentation/webkit/wkwebviewconfiguration/1395659-processpool" target="_blank" rel="noopener">processPool</a>, 因此浏览状态相互之间是不会共享的。</p></li><li><p>为什么选择<code>Keep me signed in</code>的时候浏览状态会共享？</p></li></ol><ul><li><p>首先要介绍<a href="https://developer.apple.com/documentation/webkit/wkwebsitedatastore" target="_blank" rel="noopener">WKWebsiteDataStore</a>的概念</p><blockquote><p>A WKWebsiteDataStore object represents various types of data used by a chosen website. Data types include <strong>cookies</strong>, disk and memory caches, and persistent data such as WebSQL, IndexedDB databases, and local storage.</p></blockquote><p>iOS SDK提供了两种<code>WKWebsiteDataStore</code>, <a href="https://developer.apple.com/documentation/webkit/wkwebsitedatastore/1532937-default" target="_blank" rel="noopener">WKWebsiteDataStore.default()</a>会返回默认的, persistent dataStore，而<a href="https://developer.apple.com/documentation/webkit/wkwebsitedatastore/1532934-nonpersistent" target="_blank" rel="noopener">WKWebsiteDataStore.nonPersistent()</a>会创建一个non-persistent dataStore并返回（苹果的<a href="https://developer.apple.com/documentation/webkit/wkwebviewconfiguration/1395661-websitedatastore" target="_blank" rel="noopener">文档</a>也介绍了，这种dataStore经常被用来实现无痕浏览）。</p><blockquote><p>If a web view is associated with a nonpersistent data store, no data is written to the file system. This property implements <strong>private browsing</strong> in a web view.</p></blockquote></li><li><p>默认状态下，<code>WKWebView</code>的<a href="https://developer.apple.com/documentation/webkit/wkwebviewconfiguration/1395661-websitedatastore" target="_blank" rel="noopener">websiteDataStore</a>是default版本的，也就是支持persistent cookie的dataStore</p></li><li>因此单纯的使用不同的<code>WKProcessPool</code>（默认行为），并不能保证浏览状态的隔离；由于默认状态下使用了相同的支持persistent cookie的<code>WKWebsiteDataStore.default()</code>，网页需要persistent的cookie会共享。</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>从上面的分析来看，解决方法看起来很直接，我们可以让不同的<code>WKWebView</code>持有不同的<code>WKWebsiteDataStore.nonPersistent()</code>实例</p><pre><code>private lazy var webView: WKWebView = {    let config = WKWebViewConfiguration()    config.websiteDataStore = WKWebsiteDataStore.nonPersistent()    let view = WKWebView(frame: .zero, configuration: config)    return view}()</code></pre><p>我们发现无论是否勾选<code>Keep me signed in</code>，登录状态都不会共享，太好了！</p><h2 id="但是"><a href="#但是" class="headerlink" title="但是"></a>但是</h2><img src="/2019/01/12/Session-isolation/but.jpg"><p>当用户勾选了<code>Keep me signed in</code>，杀掉app之后，我们发现登录状态”竟然”丢失了！这样虽然我们实现了登录状态隔离，但是<code>Keep me signed in</code>这个选项变得无用，这可不是一个专业的工程师希望看到的。而我们也知道，这也是我们采用了上述方案之后expected结果，因为<code>WKWebsiteDataStore.nonPersistent()</code>本身就是不支持persistent cookie的。</p><p>我们看起来<a href="https://www.bilibili.com/video/av40176036" target="_blank" rel="noopener">进退维谷</a>（这是一个视频链接，请不要在公众场合打开 ;))</p><ul><li>要想实现登录状态隔离，必须使用不同的<code>WKWebsiteDataStore</code></li><li>只有<code>WKWebsiteDataStore.default()</code>才能保存persistent cookie</li><li>但是<code>WKWebsiteDataStore.default()</code>是一个类似单例的存在，我们无法创建不同的persistent <code>WKWebsiteDataStore</code></li></ul><h2 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法+1"></a>解决方法+1</h2><p>于是我们开始尝试：</p><img src="/2019/01/12/Session-isolation/stackoverflow.jpg"><p>然后在面向StackOverflow编程无果之后，你终于意识到自己已经是有经验的工程师了，应该可以独立解决问题了，在苦思冥想之后，终于想到了下面的方法</p><ul><li><p>去看<a href="https://opensource.apple.com/release/ios-110.html" target="_blank" rel="noopener">Webkit</a>的源码，想办法使用私有的api</p><p>在浏览<code>_WKWebsiteDataStoreConfiguration.h</code>这个文件时，我们发现如下的定义</p><pre><code>#import &lt;WebKit/WKFoundation.h&gt;#if WK_API_ENABLED#import &lt;Foundation/Foundation.h&gt;NS_ASSUME_NONNULL_BEGINWK_CLASS_AVAILABLE(macosx(WK_MAC_TBA), ios(WK_IOS_TBA))@interface _WKWebsiteDataStoreConfiguration : NSObject@property (nonatomic, copy, setter=_setWebStorageDirectory:) NSURL *_webStorageDirectory;@property (nonatomic, copy, setter=_setIndexedDBDatabaseDirectory:) NSURL *_indexedDBDatabaseDirectory;@property (nonatomic, copy, setter=_setWebSQLDatabaseDirectory:) NSURL *_webSQLDatabaseDirectory;@property (nonatomic, copy, setter=_setCookieStorageFile:) NSURL *_cookieStorageFile;@endNS_ASSUME_NONNULL_END#endif</code></pre><p>  于是理论上我们可以创建<code>WKWebsiteDataStoreConfiguration</code>之后，配置不同的<code>cookieStorageFile</code>路径，然后利用下面的private API，来创建不同的支持的persistent cookie的dataStore</p><pre><code>@interface WKWebsiteDataStore (WKPrivate)+ (NSSet&lt;NSString *&gt; *)_allWebsiteDataTypesIncludingPrivate;- (instancetype)_initWithConfiguration:(_WKWebsiteDataStoreConfiguration *)configuration WK_API_AVAILABLE(macosx(WK_MAC_TBA), ios(WK_IOS_TBA));</code></pre><p>  但是我们担心无法通过苹果的审核，同时这样做需要花更多的时间去看源码确保是可行的，作为一名有经验的工程师，我们认为这不是一条正路</p></li><li><p>终于，我们意识到，既然支持persistent cookie的本质就是把cookie保存到文件系统里，那我们能不能自己来实现呢？</p><p>对于我们的sample app，我们的方案如下:</p><ol><li>两个<code>WebView</code>实例分别使用<code>WKWebsiteDataStore.default()</code>和<code>WKWebsiteDataStore.nonPersistent()</code></li><li>对于使用<code>WKWebsiteDataStore.default()</code>的<code>WebView</code>实例，我们依靠其自身的cookie persistence机制</li><li>对于使用<code>WKWebsiteDataStore.nonPersistent()</code>的<code>WebView</code>实例<ul><li>在恰当的时机，读取<code>webView</code>的所有cookie并保存到文件里</li><li>在初始化该<code>webView</code>的时候，读取文件中的所有cookie并加载到<code>webView</code>中</li></ul></li></ol><p>简单明了的方案，当然我们的代码也应该体现出我们的水平。</p><ul><li>这里我们extend了<code>WKWebsiteDataStore</code>,暴露了<code>persistCookies</code>和<code>restoreCookies</code>两个方法，暴露了<code>cookieStorageFile</code>这个属性</li><li><p>sample app中使用了最简单的<code>NSKeyedArchiver</code>来实现数据持久化（要注意在操作大文件时archive/unarchive是耗时的操作，如果可能尽量放到其他线程去做；但同时cookie的读写又必须在主线程上进行）</p><pre><code>struct WKWebsiteDataStoreAssociatedKeys {    static var cookieStorageFile: UInt8 = 0}extension WKWebsiteDataStore {    var cookieStorageFile: URL? {        get {            return objc_getAssociatedObject(self, &amp;WKWebsiteDataStoreAssociatedKeys.cookieStorageFile) as? URL        }        set {            objc_setAssociatedObject(self, &amp;WKWebsiteDataStoreAssociatedKeys.cookieStorageFile, newValue, .OBJC_ASSOCIATION_RETAIN)        }    }    func persistCookies() {        guard !self.isPersistent else {            return        }        guard let cookieStorageFilePath = self.cookieStorageFile?.path else {            return        }        self.httpCookieStore.getAllCookies { cookies in            NSKeyedArchiver.archiveRootObject(cookies.filter { !$0.isSessionOnly }, toFile: cookieStorageFilePath)        }    }    func restoreCookies() {        guard !self.isPersistent else {            return        }        guard let cookieStorageFilePath = self.cookieStorageFile?.path else {            return        }        guard let cookies = NSKeyedUnarchiver.unarchiveObject(withFile: cookieStorageFilePath) as? [HTTPCookie] else {            return        }        cookies.forEach { cookie in            self.httpCookieStore.setCookie(cookie, completionHandler: nil)        }    }}</code></pre></li><li><p>在使用的时候，只要给<code>webSiteDataStore</code>设置<code>cookieStorageFile</code>并且在合适的时机调用<code>restoreCookies</code>和<code>persistCookies</code>即可。</p></li></ul></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>于是，我们设计的这套方案，”完美”(作为一名有经验的工程师，我们知道后续还会有各种各样奇奇怪怪的问题/需求出现）的解决了</p><ul><li>不同的<code>WebView</code>之间浏览状态隔离</li><li>Persistent cookie能够正常工作</li><li>该方案可以简单的推广到N(N&gt;2)个<code>WebView</code>的情况，只需设置不同的<code>WKWebsiteDataStore.nonPersistent()</code>和<code>cookieStorageFile</code>即可</li></ul><p>终于，我们有时间感慨，今晚的月色真美啊！</p><img src="/2019/01/12/Session-isolation/happy.jpg">]]></content>
    
    <summary type="html">
    
      本文总结了在实现不同WKWebView实例之间浏览状态隔离过程中所踩的一些坑，同时给出了一套可行的解决方案。
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>WebAssembly</title>
    <link href="http://yoursite.com/2019/01/09/WebAssembly/"/>
    <id>http://yoursite.com/2019/01/09/WebAssembly/</id>
    <published>2019-01-09T07:12:44.000Z</published>
    <updated>2019-01-09T09:08:39.289Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做 <a href="https://webassembly.org" target="_blank" rel="noopener">WebAssembly</a> 相关的事情，边做边总结吧</p><h2 id="Glossary"><a href="#Glossary" class="headerlink" title="Glossary"></a><a href="https://kripken.github.io/emscripten-site/docs/site/glossary.html" target="_blank" rel="noopener">Glossary</a></h2><ul><li><a href="https://webassembly.org" target="_blank" rel="noopener">WebAssembly</a>: WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.</li><li><a href="https://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html" target="_blank" rel="noopener">emscripten</a>: Emscripten is an Open Source LLVM to JavaScript compiler.</li><li><a href="https://kripken.github.io/emscripten-site/docs/tools_reference/emsdk.html#emsdk" target="_blank" rel="noopener">emsdk</a>: The Emscripten SDK (emsdk) is used to perform all SDK maintenance and can install, update, add, remove and activate SDKs and tools.</li><li><a href="https://kripken.github.io/emscripten-site/docs/tools_reference/emcc.html#emccdoc" target="_blank" rel="noopener">emcc</a>: The Emscripten Compiler Frontend (emcc). Emscripten’s drop-in replacement for a compiler like <code>gcc</code>.</li></ul><p>我做的事情是希望在Web环境中用到C++的一个库，所以套用上面的术语，就是我会用利用<code>emsdk</code>提供的环境，使用<code>emcc</code>将<code>C++</code>编译成<code>WebAssembly</code>格式, 然后在<code>Web</code>环境中使用.</p><img src="/2019/01/09/WebAssembly/EmscriptenToolchain.png"><blockquote><p>image source: <a href="https://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html" target="_blank" rel="noopener">https://kripken.github.io/emscripten-site/docs/introducing_emscripten/about_emscripten.html</a></p></blockquote><h2 id="Browser-compatibility"><a href="#Browser-compatibility" class="headerlink" title="Browser compatibility"></a>Browser compatibility</h2><p>实践中我们比较关心的关于Thread的兼容性：</p><table><thead><tr><th>Tables</th><th>Available version</th><th>Conditions</th></tr></thead><tbody><tr><td>Google chrome</td><td>Chrome 70</td><td>Turn on experimental “WebAssembly threads support” flag</td></tr><tr><td>Mozilla firefox</td><td>Firefox nightly channel</td><td>Turn on “javascript.options.shared_memory” flag</td></tr></tbody></table><blockquote><p>Emscripten has support for multithreading using the new <strong>SharedArrayBuffer</strong> capability in browsers. Note that SharedArrayBuffer was <strong>disabled</strong> by default in all major browsers on 5 January, 2018 in response to <a href="https://meltdownattack.com" target="_blank" rel="noopener">Spectre</a>. <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=821270" target="_blank" rel="noopener">Chrome re-enabled it in v67</a> on platforms where its site-isolation feature is enabled to protect against Spectre-style vulnerabilities.</p></blockquote><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get the emsdk repo</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/juj/emsdk.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># Enter that directory</span></span><br><span class="line"><span class="built_in">cd</span> emsdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># Activate PATH and other environment variables in the current terminal</span></span><br><span class="line"><span class="built_in">source</span> ./emsdk_env.sh</span><br></pre></td></tr></table></figure><p>Sample JavaScript-C++ interoperability code</p><ul><li><p>hello.cc</p><pre><code>#include &lt;pthread.h&gt;#include &lt;iostream&gt;extern &quot;C&quot;{    extern int js_func();    void* test(void*)    {        std::cout &lt;&lt; &quot;Background thread&quot; &lt;&lt; std::endl;        std::cout &lt;&lt; js_func() &lt;&lt; std::endl;        return NULL;    }    void cpp_func()    {        pthread_t t;        pthread_create(&amp;t, NULL, &amp;test, NULL);        std::cout &lt;&lt; &quot;Main thread&quot; &lt;&lt; std::endl;    }}</code></pre></li><li><p>hello.js</p><pre><code>Module.onRuntimeInitialized = () =&gt; {    const cpp_func = Module.cwrap(&apos;cpp_func&apos;, null);    cpp_func();};</code></pre></li><li><p>hello.html</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;script src=&quot;wasm.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;hello.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li><li><p>export.js</p><pre><code>mergeInto(LibraryManager.library, {    js_func: function () {        return 10;    },});</code></pre></li><li><p>Build</p><pre><code>emcc hello.cc -o wasm.js -s EXPORTED_FUNCTIONS=&apos;[&quot;_cpp_func&quot;]&apos; -s EXTRA_EXPORTED_RUNTIME_METHODS=&apos;[&quot;cwrap&quot;]&apos; --js-library export.js -std=c++14 -s USE_PTHREADS=1 -s PTHREAD_POOL_SIZE=2 -g4</code></pre><p>Build完之后会生成<code>wasm.js</code>和<code>wasm.wasm</code>，其中<code>wasm.js</code>已经在<code>hello.html</code>中被引用，<code>wasm.wasm</code>会在<code>wasm.js</code>中被<code>fetch</code>, <code>compile</code> and <code>instantiate</code></p></li><li><p>直接打开<code>hello.html</code>看到输出</p><img src="/2019/01/09/WebAssembly/hello-output.png"></li></ul><h2 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h2><p>目前踩到的一些<strong>比较棘手</strong>的坑（嗯小坑不断）</p><ol><li><a href="https://github.com/kripken/emscripten/issues/7812" target="_blank" rel="noopener">Calling derived JavaScript object inside another thread causes binding error</a><ul><li>这个是我遇到的一个比较严重的问题，简单来说就是在<code>embind</code>和<code>webidl</code>的环境下，JavaScript能够实现C++中定义的interface，但却无法在C++的multi-thread环境中被调用</li><li>错误信息是JavaScript的Web workder环境无法识别<code>Module</code>中JavaScript中实现的Object</li><li>debug过程中发现，multi-thread环境下生成的<code>pthread-main.js</code>(worker)中, <code>Module</code>并不包含JavaScript实现的Object，具体的重现过程可以参考我在上面链接中的提出的issue</li><li>绕过这个坑的方法：目前使用纯C的接口可以绕过这个，当然不可避免的损失了C++ class的一些便利性</li></ul></li><li><a href="https://github.com/kripken/emscripten/issues/6362#issuecomment-380577403" target="_blank" rel="noopener">embind not maintained</a>?</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://kripken.github.io/emscripten-site/docs/site/glossary.html" target="_blank" rel="noopener">Glossary</a></li><li><a href="https://github.com/kripken/emscripten/issues" target="_blank" rel="noopener">Emscripten issues</a></li><li><a href="http://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/WebIDL-Binder.html" target="_blank" rel="noopener">WebIDL</a></li><li><a href="http://kripken.github.io/emscripten-site/docs/porting/connecting_cpp_and_javascript/embind.html" target="_blank" rel="noopener">Embind</a></li><li>Test suite: <ul><li><a href="https://github.com/kripken/emscripten/tree/master/tests/embind" target="_blank" rel="noopener">Embind</a></li><li><a href="https://github.com/kripken/emscripten/tree/master/tests/webidl" target="_blank" rel="noopener">Webidl</a></li></ul></li><li><a href="https://medium.com/@c.gerard.gallant/webassembly-web-workers-f2ba637c3e4a" target="_blank" rel="noopener">WebAssembly + Web worker</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="noopener">WebWorker</a></li><li>Big projects:<ul><li><a href="https://github.com/kripken/box2d.js" target="_blank" rel="noopener">Box2d.js</a> (webidl)</li><li><a href="https://github.com/ucisysarch/opencvjs" target="_blank" rel="noopener">OpenCV.js</a> (embind)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      本文作为WebAssembly的入门文章，总结了WebAssembly的相关概念，同时列出了调研过程中踩的一些坑
    
    </summary>
    
      <category term="WebAssembly" scheme="http://yoursite.com/categories/WebAssembly/"/>
    
    
      <category term="WebAssembly" scheme="http://yoursite.com/tags/WebAssembly/"/>
    
  </entry>
  
  <entry>
    <title>App thinning checklist</title>
    <link href="http://yoursite.com/2019/01/09/App-thinning-checklist/"/>
    <id>http://yoursite.com/2019/01/09/App-thinning-checklist/</id>
    <published>2019-01-09T05:01:21.000Z</published>
    <updated>2019-01-09T09:08:46.931Z</updated>
    
    <content type="html"><![CDATA[<p>这段时间对<a href="https://itunes.apple.com/us/app/microsoft-edge/id1288723196" target="_blank" rel="noopener">Microsoft Edge for iOS</a>进行了瘦身，总结如下。</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ol><li>关于Edge for iOS的一些背景<ul><li>主要语言是Swift, 所以不可避免的有Swift的8MB问题</li><li>项目使用Cocoapods管理依赖，倾向于使用静态库而非动态库</li><li>因为项目原因有一些必要依赖无法避免</li></ul></li><li>本文列举了在进行包优化的过程中所使用的一些方法/工具，其中效果显著的步骤<strong>加粗</strong>显示 （主要是清除多余文件/资源，动态库转静态库)</li><li>原文以英文内部邮件的形式发出，这里将原文脱密后附录如下</li></ol><h2 id="Why-app-size-matters"><a href="#Why-app-size-matters" class="headerlink" title="Why app size matters?"></a>Why app size matters?</h2><ol><li>Apple App store cellular download limit is 150 MB, which means app with compressed size over that limit can only be downloaded in WIFI environment</li><li>Data from Google play, for every 6 MB increase to app size, we see a decrease in the install conversion rate of 1%: <a href="https://medium.com/googleplaydev/shrinking-apks-growing-installs-5d3fcba23ce2" target="_blank" rel="noopener">https://medium.com/googleplaydev/shrinking-apks-growing-installs-5d3fcba23ce2</a></li></ol><h2 id="What-we-have-done-to-reduce-app-size"><a href="#What-we-have-done-to-reduce-app-size" class="headerlink" title="What we have done to reduce app size?"></a>What we have done to reduce app size?</h2><h3 id="Measure-app-size"><a href="#Measure-app-size" class="headerlink" title="Measure app size"></a>Measure app size</h3><ol><li>There’re two types of app size<ul><li>Download size: This is the compressed size of the app downloaded over the air. This is also what we’re trying to optimize</li><li>Install size: This is the amount of disk space the app will take up on the customer’s device. This is also what user sees on App store</li></ul></li></ol><img src="/2019/01/09/App-thinning-checklist/type-of-size.png"><blockquote><p>image source: <a href="https://stackoverflow.com/questions/35504571/is-ios-app-store-over-the-air-download-limit-based-on-download-size-or-instal" target="_blank" rel="noopener">https://stackoverflow.com/questions/35504571/is-ios-app-store-over-the-air-download-limit-based-on-download-size-or-instal</a></p></blockquote><ol start="2"><li><p>Inspect ipa files to examine the compressed size of each item in the .ipa file<br> <code>unzip -lv {app}.ipa</code></p><img src="/2019/01/09/App-thinning-checklist/unzip-ipa.png"><blockquote><p>image source: <a href="https://stackoverflow.com/questions/52422675/how-to-extract-contents-from-a-ipa-file" target="_blank" rel="noopener">https://stackoverflow.com/questions/52422675/how-to-extract-contents-from-a-ipa-file</a></p></blockquote></li><li><p><a href="https://github.com/kobe1941/shell" target="_blank" rel="noopener">Leverage LinkMap</a> to analyze the composition of main executable file</p></li></ol><img src="/2019/01/09/App-thinning-checklist/link-map.png">    <blockquote><p>image source: <a href="https://github.com/kobe1941/shell" target="_blank" rel="noopener">https://github.com/kobe1941/shell</a></p></blockquote><h3 id="Monitor-daily-build-size-change"><a href="#Monitor-daily-build-size-change" class="headerlink" title="Monitor daily build size change"></a>Monitor daily build size change</h3><p>We have integrated our package size report into our CI and it will auto generates report and mail alert</p><img src="/2019/01/09/App-thinning-checklist/package-size-report.png"><img src="/2019/01/09/App-thinning-checklist/package-size-report2.png"><h3 id="Analyze-code"><a href="#Analyze-code" class="headerlink" title="Analyze code"></a>Analyze code</h3><ol><li>Ensure Xcode build setting is correctly configured<ul><li>Optimization Level: Fastest, Smallest</li><li>Deployment Postprocessing: Yes</li><li>Strip linked Product: Yes</li><li>Symbols Hidden by default: Yes</li><li>Make Strings Read-only: Yes</li></ul></li><li><strong><a href="https://github.com/tsabend/fus" target="_blank" rel="noopener">Find and remove unused class</a></strong></li><li><strong><a href="https://medium.com/@gabriel_lewis/how-to-easily-find-unused-swift-code-in-xcode-159631961acf" target="_blank" rel="noopener">Find and remove unused code</a></strong></li></ol><h3 id="Analyze-assets"><a href="#Analyze-assets" class="headerlink" title="Analyze assets"></a>Analyze assets</h3><ol><li><strong><a href="https://github.com/tinymind/LSUnusedResources" target="_blank" rel="noopener">Find and remove unused assets</a></strong></li><li><a href="https://github.com/adrianlopezroche/fdupes" target="_blank" rel="noopener">Find and remove duplicate files</a></li><li><strong>Remove extra fonts</strong></li><li><strong>Move on-demand resources to cloud</strong></li><li>Compress resources: <a href="https://imageoptim.com/mac" target="_blank" rel="noopener">Image</a>, <a href="https://ffmpeg.org" target="_blank" rel="noopener">Video/Audio</a></li></ol><h3 id="Analyze-dependencies"><a href="#Analyze-dependencies" class="headerlink" title="Analyze dependencies"></a>Analyze dependencies</h3><ol><li><strong><a href="https://recoursive.com/2018/06/06/static_libraries_cocoapods/" target="_blank" rel="noopener">Move Cocoapods dependencies from dynamic framework to static libraries</a></strong></li><li>Ensure dependencies are correctly built for release mode and resources compressed</li><li>Remove unneeded dependencies</li></ol><h2 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h2><p>There’re some potential optimization methods which need more efforts, we’re actively evaluating their feasibilities</p><ol><li>Use 8-bit PNG instead of 32-bit PNG</li><li>Replace small images with inline code</li><li>Compress JavaScript/html</li><li>Remove duplicate strings</li><li>Turn off C++/Objective-C exception support in Xcode</li></ol>]]></content>
    
    <summary type="html">
    
      本文总结了对Microsoft Edge for iOS进行了瘦身过程中所用到的方法/工具
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Performance" scheme="http://yoursite.com/tags/Performance/"/>
    
  </entry>
  
  <entry>
    <title>Build and Install Hadoop 2.7.2 on Windows</title>
    <link href="http://yoursite.com/2016/02/17/Build-and-Install-Hadoop-2-7-2-on-Windows/"/>
    <id>http://yoursite.com/2016/02/17/Build-and-Install-Hadoop-2-7-2-on-Windows/</id>
    <published>2016-02-17T05:27:20.000Z</published>
    <updated>2019-01-09T08:59:24.263Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚在Windows10 + Visual Studio 2015 环境下配置了Hadoop Single Node Cluster,下面是主要的步骤.</p><h2 id="Build-Hadoop-Core"><a href="#Build-Hadoop-Core" class="headerlink" title="Build Hadoop Core"></a>Build Hadoop Core</h2><p>这部分主要参照<a href="http://kplitzkahran.blogspot.co.uk/2015/08/hadoop-271-for-windows-10-binary-build.html" target="_blank" rel="noopener">Hadoop 2.7.1 for Windows 10 binary build with Visual Studio 2015 (unofficial)</a></p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>D盘下新建目录D:\Hadoop 用来存放所有的Hadoop配置相关文件</p><h3 id="安装Java"><a href="#安装Java" class="headerlink" title="安装Java"></a>安装Java</h3><p>下载地址: <a href="http://download.oracle.com/otn-pub/java/jdk/8u73-b02/jdk-8u73-windows-x64.exe" target="_blank" rel="noopener">Java SE Development Kit 8u73 Windows x64</a><br>安装地址: D:\Hadoop\jdk1.8.0_73<br>将环境变量 JAVA_HOME 设置为jdk的位置 D:\Hadoop\jdk1.8.0_73</p><h3 id="Getting-Hadoop-sources"><a href="#Getting-Hadoop-sources" class="headerlink" title="Getting Hadoop sources"></a>Getting Hadoop sources</h3><p>下载地址: <a href="http://mirrors.ibiblio.org/apache/hadoop/common/current/hadoop-2.7.2-src.tar.gz" target="_blank" rel="noopener">hadoop-2.7.2-src.tar.gz</a><br>解压地址: D:\Hadoop\hadoop-2.7.2-src</p><h3 id="安装其他依赖"><a href="#安装其他依赖" class="headerlink" title="安装其他依赖"></a>安装其他依赖</h3><p>打开 D:\Hadoop\hadoop-2.7.2-src\BUILDING.txt ,里面列出了其他的Requirements:</p><ul><li>Maven 3.0 or later</li><li>ProtocolBuffer <strong>2.5.0</strong></li><li>CMake 2.6 or newer</li><li>zlib headers </li><li>Unix command-line tools from GnuWin32: sh, mkdir, rm, cp, tar, gzip. These tools must be present on your PATH.</li></ul><h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><p>下载地址: <a href="http://ftp.tsukuba.wide.ad.jp/software/apache/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz" target="_blank" rel="noopener">apache-maven-3.3.9-bin.tar.gz</a><br>解压地址: D:\Hadoop\apache-maven-3.3.9<br>将 D:\Hadoop\apache-maven-3.3.9\bin 添加到PATH环境变量中</p><h4 id="ProtocolBuffer-2-5-0"><a href="#ProtocolBuffer-2-5-0" class="headerlink" title="ProtocolBuffer 2.5.0"></a>ProtocolBuffer 2.5.0</h4><p>下载地址: <a href="https://github.com/google/protobuf/releases/download/v2.5.0/protoc-2.5.0-win32.zip" target="_blank" rel="noopener">protocol-2.5.0-win32.zip</a><br>解压地址: D:\Hadoop\protoc-2.5.0-win32<br>将 D:\Hadoop\protoc-2.5.0-win32 添加到PATH环境变量中</p><h4 id="CMake-3-4-3"><a href="#CMake-3-4-3" class="headerlink" title="CMake 3.4.3"></a>CMake 3.4.3</h4><p>下载地址: <a href="https://cmake.org/files/v3.5/cmake-3.5.0-rc2-win32-x86.msi" target="_blank" rel="noopener">cmake-3.5.0-rc2-win32-x86.msi</a><br>安装时记得勾选添加到PATH环境变量<br><img src="/2016/02/17/Build-and-Install-Hadoop-2-7-2-on-Windows/CMake.png"></p><h4 id="zlib-headers"><a href="#zlib-headers" class="headerlink" title="zlib headers"></a>zlib headers</h4><p>下载地址: <a href="http://zlib.net/zlib128-dll.zip" target="_blank" rel="noopener">zlib128-dll.zip</a><br>解压地址: D:\Hadoop\zlib128-dll<br>在环境变量中添加ZLIB_HOME,值为D:\Hadoop\zlib128-dll\include</p><h4 id="Unix-command-line-tools-from"><a href="#Unix-command-line-tools-from" class="headerlink" title="Unix command-line tools from"></a>Unix command-line tools from</h4><p>根据BUILDING.txt,这个tool可以在安装git的时候顺带安装<br>下载地址: <a href="http://git-scm.com/download/win" target="_blank" rel="noopener">git-2.7.1</a><br><strong>安装的时候记得勾选 “Use Git and optional Unix tools from the Windows Command Prompt”</strong><br><img src="/2016/02/17/Build-and-Install-Hadoop-2-7-2-on-Windows/UnixCommandLineTools.png"></p><h3 id="配置MSBuild"><a href="#配置MSBuild" class="headerlink" title="配置MSBuild"></a>配置MSBuild</h3><p>将C:\Windows\Microsoft.NET\Framework64\v4.0.30319添加到PATH环境变量中</p><h3 id="更新VS-Project文件"><a href="#更新VS-Project文件" class="headerlink" title="更新VS Project文件"></a>更新VS Project文件</h3><p>用Visual Studio 2015打开下面两个solution,右键solution，选择Retarget Projects</p><ul><li>D:\Hadoop\hadoop-2.7.2-src\hadoop-common-project\hadoop-common\src\main\winutils\winutils.sln</li><li>D:\Hadoop\hadoop-2.7.2-src\hadoop-common-project\hadoop-common\src\main\native\native.sln<img src="/2016/02/17/Build-and-Install-Hadoop-2-7-2-on-Windows/RetargetProjects.png"></li></ul><h3 id="更新编译选项"><a href="#更新编译选项" class="headerlink" title="更新编译选项"></a>更新编译选项</h3><p>打开 D:\Hadoop\hadoop-2.7.2-src\hadoop-hdfs-project\hadoop-hdfs\pom.xml ,将下面这一行改为Visual Studio 2015的形式</p><p>修改前<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">condition</span> <span class="attr">property</span>=<span class="string">"generator"</span> <span class="attr">value</span>=<span class="string">"Visual Studio 10"</span> <span class="attr">else</span>=<span class="string">"Visual Studio 10 Win64"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改后<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">condition</span> <span class="attr">property</span>=<span class="string">"generator"</span> <span class="attr">value</span>=<span class="string">"Visual Studio 10"</span> <span class="attr">else</span>=<span class="string">"Visual Studio 14 2015 Win64"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Build-Package-files"><a href="#Build-Package-files" class="headerlink" title="Build Package files"></a>Build Package files</h3><p>启动 Developer Command Prompt for VS2015<br><img src="/2016/02/17/Build-and-Install-Hadoop-2-7-2-on-Windows/DeveloperCommandPromptForVS2015.png"></p><p>在 D:\Hadoop\hadoop-2.7.2-src 下执行下面的命令<strong>设置 Platform environment variable</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set Platform=x64</span><br></pre></td></tr></table></figure><p>然后执行如下命令开始build</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package -Pdist,native-win -DskipTests -Dtar</span><br></pre></td></tr></table></figure><p>build过程中如果出现 OutOfMemoryError,通过下面的命令 assign more memory,然后重新build</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set MAVEN_OPTS=-Xmx512m -XX:MaxPermSize=128m</span><br></pre></td></tr></table></figure><p>如果出现jni.h找不到的错误，可以将下面三个文件复制到 C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\include 下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\Hadoop\jdk1.8.0_73\include\jni.h</span><br><span class="line">D:\Hadoop\jdk1.8.0_73\include\win32\jawt_md.h</span><br><span class="line">D:\Hadoop\jdk1.8.0_73\include\win32\jni_md.h</span><br></pre></td></tr></table></figure><h3 id="Copy-Package-files"><a href="#Copy-Package-files" class="headerlink" title="Copy Package files"></a>Copy Package files</h3><p>Build成功后，将 D:\Hadoop\hadoop-2.7.2-src\hadoop-dist\target\ 下的hadoop-2.7.2文件夹复制到 D:\Hadoop\hadoop-2.7.2</p><h2 id="Start-a-Single-Node-pseudo-distributed-Cluster"><a href="#Start-a-Single-Node-pseudo-distributed-Cluster" class="headerlink" title="Start a Single Node (pseudo-distributed) Cluster"></a>Start a Single Node (pseudo-distributed) Cluster</h2><p>接下来就可以参照<a href="http://wiki.apache.org/hadoop/Hadoop2OnWindows" target="_blank" rel="noopener">Build and Install Hadoop 2.x or newer on Windows</a>，配置Single Node Cluster，<strong>注意Command Prompt必须具有Admin权限</strong>，否则在执行yarn指令时会报错 “A required priviledge is not held by the client”</p><h2 id="在IntelliJ-IDEA中单机调试Hadoop程序"><a href="#在IntelliJ-IDEA中单机调试Hadoop程序" class="headerlink" title="在IntelliJ IDEA中单机调试Hadoop程序"></a>在IntelliJ IDEA中单机调试Hadoop程序</h2><p>这部分内容可以参照<a href="https://mrchief2015.wordpress.com/2015/02/09/compiling-and-debugging-hadoop-applications-with-intellij-idea-for-windows/" target="_blank" rel="noopener">HOW-TO: COMPILE AND DEBUG HADOOP APPLICATIONS WITH INTELLIJ IDEA IN WIDNOWS OS(64BIT)</a></p><p>注意的地方是<strong>WordCount例程中不要忘记下面这一行</strong>，否则Class not found</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">job.setJarByClass(WordCount.class);</span><br></pre></td></tr></table></figure><h2 id="Intellij-IDEA生成Jar包"><a href="#Intellij-IDEA生成Jar包" class="headerlink" title="Intellij IDEA生成Jar包"></a>Intellij IDEA生成Jar包</h2><p>这部分内容参照<a href="http://chenbiaolong.com/2015/03/26/%E6%90%AD%E5%BB%BAHadoop%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">Intellij IDEA 搭建Hadoop开发环境</a></p><ul><li>选择菜单File-&gt;Project Structure，弹出Project Structure的设置对话框</li><li>选择左边的Artifacts后点击上方的“+”按钮 </li><li>在弹出的框中选择jar-&gt;from moduls with dependencies.. </li><li>选择要启动的类，然后 确定 </li><li>应用之后，对话框消失。在IDEA选择菜单Build-&gt;Build Artifacts,选择Build或者Rebuild后即可生成，生成的jar文件位于工程项目目录的out/artifacts下</li></ul><p>要注意的地方是<strong>修改args[0]和args[1]</strong>，将原先WordCount中的下面两行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br></pre></td></tr></table></figure><p>改为</p><pre><code class="java">FileInputFormat.addInputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">2</span>]));</code></pre><p>原因可以参考这里<a href="http://stackoverflow.com/questions/4913212/org-apache-hadoop-mapred-filealreadyexistsexception" target="_blank" rel="noopener">org.apache.hadoop.mapred.FileAlreadyExistsException</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://wiki.apache.org/hadoop/Hadoop2OnWindows" target="_blank" rel="noopener">Build and Install Hadoop 2.x or newer on Windows</a></li><li><a href="http://kplitzkahran.blogspot.co.uk/2015/08/hadoop-271-for-windows-10-binary-build.html" target="_blank" rel="noopener">Hadoop 2.7.1 for Windows 10 binary build with Visual Studio 2015 (unofficial)</a></li><li><a href="https://cwiki.apache.org/confluence/display/MAVEN/OutOfMemoryError" target="_blank" rel="noopener">OutOfMemoryError</a></li><li><a href="https://mrchief2015.wordpress.com/2015/02/09/compiling-and-debugging-hadoop-applications-with-intellij-idea-for-windows/" target="_blank" rel="noopener">HOW-TO: COMPILE AND DEBUG HADOOP APPLICATIONS WITH INTELLIJ IDEA IN WIDNOWS OS(64BIT)</a></li><li><a href="http://chenbiaolong.com/2015/03/26/%E6%90%AD%E5%BB%BAHadoop%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/" target="_blank" rel="noopener">Intellij IDEA 搭建Hadoop开发环境</a></li><li><a href="http://stackoverflow.com/questions/4913212/org-apache-hadoop-mapred-filealreadyexistsexception" target="_blank" rel="noopener">org.apache.hadoop.mapred.FileAlreadyExistsException</a></li></ul>]]></content>
    
    <summary type="html">
    
      本文总结了在Windows10 + Visual Studio 2015 环境下配置了Hadoop Single Node Cluster的步骤
    
    </summary>
    
      <category term="Hadoop" scheme="http://yoursite.com/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
  </entry>
  
</feed>
